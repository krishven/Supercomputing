#include <iostream>
#include <cilk.h>
#include <cilkview.h>
#include <iomanip>

#define V 5000
#define NA 100000

using namespace std;

void printSolution(int graph[][V]);

void iterFW(int graph[][V])
{
    cilk::cilkview cv;
    cv.start();
    for (int k = 0; k < V; k++)
    {
        for (int i = 0; i < V; i++)
        {
            for (int j = 0; j < V; j++)
            {
                if (graph[i][k] + graph[k][j] < graph[i][j])
                    graph[i][j] = graph[i][k] + graph[k][j];
            }
        }
    }
    cv.stop();
    cv.dump("results", false);
    cout << cv.accumulated_milliseconds() / 1000.f << " seconds" << endl;
    //printSolution(graph);
}

void printSolution(int graph[][V])
{
    for (int i = 0; i < V; i++)
    {
        for (int j = 0; j < V; j++)
        {
            cout.width(8);
            if (graph[i][j] == NA)
                cout << "-";
            else
                cout << graph[i][j];
        }
        cout << "\n";
    }
}

int cilk_main(int argc, char* argv[])
{
    int graph[V][V];

    for (int i = 0; i < V; i++)
        for (int j = 0; j < V; j++)
            if (i == j)
                graph[i][j] = 0;
            else
                graph[i][j] = i + j;

    // Print the solution
    iterFW(graph);
    return 0;
}
