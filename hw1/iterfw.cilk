#include <iostream>
#include <cilk.h>
#include <cilkview.h>

#define V 4
#define NA 100000

void printSolution(int dist[][V]);

void floydWarshell (int graph[][V])
{
    int dist[V][V];
    cilk::cilkview cv;
    for (int i = 0; i < V; i++)
        for (int j = 0; j < V; j++)
            dist[i][j] = graph[i][j];
    cv.start();
    cilk_for (int k = 0; k < V; k++)
    {
        cilk_for (int i = 0; i < V; i++)
        {
            for (int j = 0; j < V; j++)
            {
                if (dist[i][k] + dist[k][j] < dist[i][j])
                    dist[i][j] = dist[i][k] + dist[k][j];
            }
        }
    }
    cv.stop();
    cv.dump("results", false);
    std::cout << cv.accumulated_milliseconds() / 1000.f << " seconds" << std::endl;
    printSolution(dist);
}

void printSolution(int dist[][V])
{
    for (int i = 0; i < V; i++)
    {
        for (int j = 0; j < V; j++)
        {
            if (dist[i][j] == NA)
                std::cout << "       " << "-";
            else
                std::cout << "       "   << dist[i][j];
        }
        std::cout << "\n";
    }
}

int cilk_main(int argc, char* argv[])
{
    int graph[V][V] = { {0,   5,  NA, 10},
        {NA, 0,   3, NA},
        {NA, NA, 0,   1},
        {NA, NA, NA, 0}
    };

    // Print the solution
    floydWarshell(graph);
    return 0;
}